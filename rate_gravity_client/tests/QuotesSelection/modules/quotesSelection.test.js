import quoteQueryReducer, {
  LOAN_SIZE_INPUT,
  CREDIT_SCORE_INPUT,
  SELECT_PROPERTY_TYPE,
  SELECT_OCCUPANCY,
  RATE_QUOTE_QUERY_RECIEVED,

  loanSizeInput,
  creditScoreInput,
  selectPropertyType,
  selectOccupancy,
} from '../../../src/QuotesSelection/modules/quotesSelection';

const requestId = "837c61de-1bcb-4968-bcb5-3db9ad776dc1"

// Test actions creator
test('Test quotes Selection action creator', () => {
  expect(loanSizeInput(400000)).toEqual({ type: LOAN_SIZE_INPUT, loanSize: 400000 });
  expect(creditScoreInput(680)).toEqual({ type: CREDIT_SCORE_INPUT, creditScore: 680 });
  expect(selectPropertyType('Condo')).toEqual({ type: SELECT_PROPERTY_TYPE, propertyType: 'Condo' });
  expect(selectOccupancy('Primary')).toEqual({ type: SELECT_OCCUPANCY, occupancy: 'Primary' })
});


const testState = {
  requestId: '',
  quoteQuery: {
    loanSize: 0,
    creditScore: 0,
    propertyType: 'SingleFamily',
    occupancy: 'Primary'
  }
}

// Test reducer
test('Test quoteQueryReducer generated by actions creator', () => {
  expect(quoteQueryReducer(testState.quoteQuery,{})).toEqual(testState.quoteQuery)

  let action = loanSizeInput(400000);
  const loanSizeState = quoteQueryReducer(testState, action);
  let expectedState = quoteQueryReducer(testState, action);
  expect(loanSizeState).toEqual(expectedState)
  
  action = creditScoreInput(680);
  const crediScoreState = quoteQueryReducer(loanSizeState, action);
  expectedState = {...loanSizeState};
  expectedState.quoteQuery.creditScore = 680;
  expect(crediScoreState).toEqual(expectedState)

  action = selectPropertyType('Condo');
  const propertyTypeState = quoteQueryReducer(crediScoreState, action);
  expectedState = {...crediScoreState};
  expectedState.quoteQuery.propertyType = 'Condo';
  expect(propertyTypeState).toEqual(expectedState)

  action = selectOccupancy('Primary');
  const occupancyState = quoteQueryReducer(propertyTypeState, action);
  expectedState = {...propertyTypeState};
  expectedState.quoteQuery.occupancy = 'Primary';
  expect(occupancyState).toEqual(expectedState)

  action = { type: RATE_QUOTE_QUERY_RECIEVED, payload: { requestId } };
  const requestIdState = quoteQueryReducer(occupancyState, action);
  expectedState.requestId = requestId;
  expect(requestIdState).toEqual(expectedState)

});